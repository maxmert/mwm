var async, dialog, fs, log, maxmertkit, pack, path, request, _;

pack = require('../package.json');

async = require('async');

request = require('superagent');

fs = require('fs');

path = require('path');

dialog = require('commander');

_ = require('underscore');

log = require('./logger');

maxmertkit = require('./maxmertkit');

exports.init = function(options) {
  var fileName,
    _this = this;
  fileName = 'index.sass';
  return async.series({
    widget: function(callback) {
      return request.get("" + pack.homepage + "/defaults/widget").set('X-Requested-With', 'XMLHttpRequest').set('Accept', 'application/json').end(function(res) {
        if (res.ok) {
          return write(fileName, JSON.stringify(res.body, null, 4), callback);
        } else {
          log.requestError(res.body.msg, 'ERRR', res.status);
          return callback(res.error, null);
        }
      });
    }
  }, function(err, res) {
    if (err != null) {
      log.error("An error while initialized widget.");
      return process.stdin.destroy();
    } else {
      return process.stdin.destroy();
    }
  });
};

exports.install = function(pth, list, callback) {
  var arr;
  arr = [];
  _.each(list, function(version, name) {
    return arr.push({
      name: name,
      version: version
    });
  });
  return async.every(arr, function(result, callback) {
    return process.nextTick(function() {
      var _this = this;
      return request.get("" + pack.homepage + "/themes/" + theme.name + "/" + theme.version).set('X-Requested-With', 'XMLHttpRequest').end(function(res) {
        var nme, value, _ref;
        if (!res.ok) {
          return log.requestError(res.body.msg, 'ERRR', res.status);
        } else {
          if (!(result != null)) {
            result = res.body;
          } else {
            _ref = res.body;
            for (nme in _ref) {
              value = _ref[nme];
              result[nme] += "\t" + value;
            }
          }
          log.requestSuccess("theme " + theme.name + "@" + theme.version + " successfully downloaded.");
          return callback(null, result);
        }
      });
    });
  }, function(err, res) {
    var nme, str, value;
    if (err != null) {
      log.error("An error while installing themes.");
      return process.stdin.destroy();
    } else {
      if (!(res != null)) {
        log.error("An error while installing themes.");
        return process.stdin.destroy();
      } else {
        str = '';
        for (nme in res) {
          value = res[nme];
          str += "$" + nme + ": " + value + "\n";
        }
        return sass(fileName, str, function(err, res) {
          if (err != null) {
            return log.error("Couldn\'t write file " + fileName);
          } else {
            return fs.appendFile('_imports.sass', "@import '" + fileName + "'\n", function(err) {
              if (err != null) {
                return log.error("Couldn\'t append import of " + fileName + " to the file _imports.sass");
              } else {
                console.log('\n');
                return log.requestSuccess("all themes successfully installed.");
              }
            });
          }
        });
      }
    }
  });
};

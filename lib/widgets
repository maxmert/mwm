var archives, async, dialog, fs, log, maxmertkit, modifyers, mustache, pack, path, request, templates, themes, write, _;

pack = require('../package.json');

templates = require('../templates.json');

async = require('async');

request = require('superagent');

fs = require('fs');

path = require('path');

dialog = require('commander');

_ = require('underscore');

mustache = require('mustache');

log = require('./logger');

archives = require('./archives');

maxmertkit = require('./maxmertkit');

themes = require('./themes');

modifyers = require('./modifyers');

exports.init = function(options) {
  var fileName, mjson, paramsFileName,
    _this = this;
  fileName = '_index.sass';
  paramsFileName = '_params.sass';
  mjson = maxmertkit.json();
  return async.series({
    widget: function(callback) {
      write('_imports.sass', "// Generated with mwm – maxmertkit widget manager\n", callback);
      write(fileName, mustache.render(templates.widget, mjson), callback);
      return write(paramsFileName, mustache.render(templates.params, mjson), callback);
    }
  }, function(err, res) {
    if (err != null) {
      log.error("An error while initialized widget.");
      return process.stdin.destroy();
    } else {
      return process.stdin.destroy();
    }
  });
};

exports.publish = function(options) {
  var mjson,
    _this = this;
  mjson = maxmertkit.json();
  return async.series({
    widget: function(callback) {
      return archives.pack('.', callback);
    },
    password: function(callback) {
      return dialog.password('\nEnter your password: ', function(password) {
        return callback(null, password);
      });
    }
  }, function(err, res) {
    var packFile;
    if (err != null) {
      log.error("Publishing canceled.");
      return process.stdin.destroy();
    } else {
      packFile = path.join('.', "" + mjson.name + "@" + mjson.version + ".tar");
      return request.post("" + pack.homepage + "/widgets/" + mjson.name + "/" + mjson.version).set('X-Requested-With', 'XMLHttpRequest').attach('pack', packFile).field('packName', path.basename(packFile)).field('password', res.password).field('name', mjson.name).field('version', mjson.version).field('username', mjson.author).end(function(res) {
        if (res.ok) {
          log.requestSuccess("widget " + mjson.name + "@" + mjson.version + " successfully published.");
          return process.stdin.destroy();
        } else {
          log.requestError(res.body.msg, 'ERRR', res.status);
          return process.stdin.destroy();
        }
      });
    }
  });
};

exports.unpublish = function(options) {
  var fileName, mjson,
    _this = this;
  mjson = maxmertkit.json();
  fileName = "" + mjson.name + "@" + mjson.version + ".tar";
  return async.series({
    password: function(callback) {
      return dialog.password('\nEnter your password: ', function(password) {
        return callback(null, password);
      });
    }
  }, function(err, res) {
    if (err) {
      log.error("Could not unpublish widget.");
      if (!(typeof callback !== "undefined" && callback !== null) || typeof callback === 'object') {
        return process.stdin.destroy();
      } else {
        return callback(err, mjson.name);
      }
    } else {
      return request.del("" + pack.homepage + "/widgets/" + mjson.name + "/" + mjson.version).set('X-Requested-With', 'XMLHttpRequest').field('packName', fileName).field('name', mjson.name).field('version', mjson.version).field('password', res.password).field('username', mjson.author).end(function(res) {
        if (res.ok) {
          log.requestSuccess("widget " + mjson.name + "@" + mjson.version + " successfully unpublished.");
          if (!(typeof callback !== "undefined" && callback !== null) || typeof callback === 'object') {
            return process.stdin.destroy();
          } else {
            return callback(null, mjson.name);
          }
        } else {
          log.requestError(res.body.msg, 'ERRR', res.status);
          if (!(typeof callback !== "undefined" && callback !== null) || typeof callback === 'object') {
            return process.stdin.destroy();
          } else {
            return callback(true, mjson.name);
          }
        }
      });
    }
  });
};

exports.install = function(pth, list, calll, depent) {
  var arr;
  arr = [];
  _.each(list, function(info, name) {
    return arr.push({
      name: name,
      version: info.version,
      themes: info.themes,
      modifyers: info.modifyers
    });
  });
  return async.every(arr, function(widget, callback) {
    var _this = this;
    this.calll = calll;
    this.depent = depent;
    return process.nextTick(function(callback, calll, dependent) {
      var fileName, req;
      fileName = "" + widget.name + "@" + widget.version + ".tar";
      return req = request.get("" + pack.homepage + "/widgets/" + widget.name + "/" + widget.version).set('X-Requested-With', 'XMLHttpRequest').end(function(res) {
        var stream;
        if (res.ok) {
          req = request.get("" + pack.homepage + "/widgets/" + widget.name + "/" + widget.version).set('X-Requested-With', 'XMLHttpRequest');
          stream = fs.createWriteStream(path.join(pth, fileName));
          req.pipe(stream);
          return stream.on('close', function() {
            return archives.unpack(path.join(pth, fileName), function(err) {
              if (err != null) {
                log.error("Couldn\'t unpack " + widget.name + "@" + widget.version + ".tar");
                return callback(true, null);
              } else {
                fs.unlink(path.join(pth, fileName));
                return fs.readFile(path.join(pth, '../../_imports.sass'), function(err, data) {
                  if (err != null) {
                    log.error("Coluld not read " + (path.join(pth, '../../_imports.sass')) + ".");
                    return process.stdin.destroy();
                  } else {
                    data = ("@import 'dependences/widgets/" + widget.name + "/_index.sass'\n") + data;
                    return fs.writeFile(path.join(pth, '../../_imports.sass'), data, function(err) {
                      if (err != null) {
                        return callback(true, null);
                      } else {
                        if (this.depent) {
                          depent = true;
                        }
                        if (widget.themes != null) {
                          depent = true;
                        }
                        fs.writeFileSync(path.join(pth, widget.name, '_params.sass'), "$dependent: " + depent + "\n");
                        this.calll(path.join(pth, widget.name), depent);
                        if (widget.themes != null) {
                          themes.install(path.join(pth, widget.name, 'dependences/themes'), widget.themes, depent);
                        }
                        if (widget.modifyers != null) {
                          return modifyers.install(path.join(pth, widget.name, 'dependences/modifyers'), widget.modifyers);
                        }
                      }
                    });
                  }
                });
              }
            });
          });
        } else {
          log.requestError(res.body.msg, 'ERRR', res.status);
          if (!(callback != null) || typeof callback === 'object') {
            return process.stdin.destroy();
          } else {
            return callback(true, widget.name);
          }
        }
      });
    });
  }, function(res) {
    if (!(res != null)) {
      log.error("An error while installing widgets.");
      return process.stdin.destroy();
    } else {
      return log.success("Done.");
    }
  });
};

write = function(file, data, callback) {
  return fs.writeFile(file, data, function(err) {
    if (err) {
      log.error("initializing – " + err + ".");
      return callback(err, null);
    } else {
      log.success("file " + file + " successfully created.");
      return callback(null, data);
    }
  });
};

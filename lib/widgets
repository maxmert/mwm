var async, dialog, fs, fstream, log, mustache, ncp, pack, path, request, tar, templates;

pack = require('../package.json');

templates = require('../templates.json');

request = require('superagent');

dialog = require('commander');

path = require('path');

log = require('./logger');

async = require('async');

tar = require('tar');

mustache = require('mustache');

fs = require('fs');

ncp = require('ncp').ncp;

fstream = require('fstream');

exports.maxmertkit = function() {
  var json, rawjson;
  rawjson = fs.readFileSync(path.join('.', pack.maxmertkit));
  if (!(rawjson != null)) {
    log.error("couldn\'t read " + pack.maxmertkit + " file.");
    return process.stdin.destroy();
  } else {
    return json = JSON.parse(rawjson);
  }
};

exports.initApp = function(options) {
  if (!options.theme && !options.modifyer) {
    return this.initWidgetSubapp(options);
  } else if (options.theme) {
    return this.initThemeSubapp(options);
  } else if (options.modifyer) {
    return this.initModifyerSubapp(options);
  }
};

exports.initCommonSubapp = function(options, callback) {
  var _this = this;
  return async.series({
    type: function(callback) {
      if (!options.theme && !options.modifyer) {
        return callback(null, 'widget');
      } else if (options.theme) {
        return callback(null, 'theme');
      } else if (options.modifyer) {
        return callback(null, 'modifyer');
      }
    },
    name: function(callback) {
      var defaultPkgName;
      defaultPkgName = 'test';
      return dialog.prompt("name: (test) ", function(pkgName) {
        if (pkgName === '') {
          pkgName = defaultPkgName;
        }
        return callback(null, pkgName);
      });
    },
    version: function(callback) {
      var defaultVersion;
      defaultVersion = '0.0.0';
      return dialog.prompt("version: (0.0.0) ", function(version) {
        if (version === '') {
          version = defaultVersion;
        }
        return callback(null, version);
      });
    },
    description: function(callback) {
      return dialog.prompt("description: ", function(description) {
        return callback(null, description);
      });
    },
    repository: function(callback) {
      return dialog.prompt("repository: ", function(repository) {
        return callback(null, repository);
      });
    },
    author: function(callback) {
      return dialog.prompt("author: ", function(author) {
        return callback(null, author);
      });
    },
    license: function(callback) {
      var defaultLicense;
      defaultLicense = 'BSD';
      return dialog.prompt("license: (BSD) ", function(license) {
        if (license === '') {
          license = defaultLicense;
        }
        return callback(null, license);
      });
    }
  }, function(err, maxmertkitjson) {
    return _this.initWriteConfirm(pack.maxmertkit, maxmertkitjson, callback);
  });
};

exports.initWriteConfirm = function(file, json, callback) {
  var _this = this;
  console.log("\n\nWriting file " + file + "\n");
  return dialog.confirm("Is everything correct? \n\n " + (JSON.stringify(json, null, 4)) + "\n-> ", function(ok) {
    console.log("");
    if (!ok) {
      log.error("Initializing canceled");
      callback(ok, null);
      return process.stdin.destroy();
    } else {
      return fs.exists(file, function(exists) {
        if (!exists) {
          _this.initWrite(file, json, callback);
          return process.stdin.destroy();
        } else {
          log.error("File " + file + " already exists.");
          return dialog.confirm("Do you want to overwrite it and all other files in that folder? -> ", function(ok) {
            if (!ok) {
              log.error("initialization canceled.");
              callback(ok, null);
              return process.stdin.destroy();
            } else {
              _this.initWrite(file, json, callback);
              return process.stdin.destroy();
            }
          });
        }
      });
    }
  });
};

exports.initWrite = function(file, json, callback) {
  return fs.writeFile(file, JSON.stringify(json, null, 4), function(err) {
    if (err) {
      log.error("initializing â€“ " + err + ".");
      return callback(err, null);
    } else {
      log.success("file " + file + " successfully created.");
      return callback(null, json);
    }
  });
};

exports.initWidgetSubapp = function(options) {
  var _this = this;
  return async.series({
    common: function(callback) {
      return _this.initCommonSubapp(options, callback);
    }
  }, function(err, res) {
    return console.log('ok');
  });
};

exports.initThemeSubapp = function(options) {
  var fileName,
    _this = this;
  fileName = 'theme.json';
  return async.series({
    common: function(callback) {
      return _this.initCommonSubapp(options, callback);
    },
    theme: function(callback) {
      return request.get("" + pack.homepage + "/defaults/theme").set('X-Requested-With', 'XMLHttpRequest').set('Accept', 'application/json').end(function(res) {
        if (res.ok) {
          return _this.initWrite(fileName, res.body, callback);
        } else {
          log.requestError(res.body.msg, 'ERRR', res.status);
          return callback(res.error, null);
        }
      });
    }
  }, function(err, res) {
    if (err != null) {
      log.error("An error while initialized theme.");
      return process.stdin.destroy();
    } else {
      return process.stdin.destroy();
    }
  });
};

exports.initModifyerSubapp = function(options) {
  var fileName,
    _this = this;
  fileName = 'modifyer.json';
  return async.series({
    common: function(callback) {
      return _this.initCommonSubapp(options, callback);
    },
    theme: function(callback) {
      return request.get("" + pack.homepage + "/defaults/modifyer").set('X-Requested-With', 'XMLHttpRequest').set('Accept', 'application/json').end(function(res) {
        if (res.ok) {
          return _this.initWrite(fileName, res.body, callback);
        } else {
          log.requestError(res.body.msg, 'ERRR', res.status);
          return callback(res.error, null);
        }
      });
    }
  }, function(err, res) {
    if (err != null) {
      log.error("An error while initialized modifyer.");
      return process.stdin.destroy();
    } else {
      return process.stdin.destroy();
    }
  });
};

exports.Publish = function(options) {
  var maxmertkit;
  maxmertkit = this.maxmertkit();
  switch (maxmertkit.type) {
    case 'widget':
      return this.PublishWidget(options);
    case 'theme':
      return this.PublishTheme(options);
    case 'modifyer':
      return this.PublishModifyer(options);
  }
};

exports.PublishModifyer = function(options) {
  var fileName, maxmertkit,
    _this = this;
  maxmertkit = this.maxmertkit();
  fileName = 'modifyer.json';
  return async.series({
    modifyer: function(callback) {
      var json, rawjson;
      rawjson = fs.readFileSync(path.join('.', fileName));
      if (!(rawjson != null)) {
        log.error("couldn\'t read " + fileName + " file.");
        return callback(true, null);
      } else {
        json = JSON.parse(rawjson);
        return callback(null, json);
      }
    },
    password: function(callback) {
      return dialog.password('\nEnter your password: ', function(password) {
        return callback(null, password);
      });
    }
  }, function(err, res) {
    if (err != null) {
      log.error("Publishing canceled.");
      return process.stdin.destroy();
    } else {
      return request.post("" + pack.homepage + "/modifyers/" + maxmertkit.name + "/" + maxmertkit.version).set('X-Requested-With', 'XMLHttpRequest').send({
        modifyer: res.modifyer,
        password: res.password,
        name: maxmertkit.name,
        version: maxmertkit.version,
        username: maxmertkit.author
      }).end(function(res) {
        if (res.ok) {
          log.requestSuccess("modifyer " + maxmertkit.name + "@" + maxmertkit.version + " successfully published.");
          return process.stdin.destroy();
        } else {
          log.requestError(res.body.msg, 'ERRR', res.status);
          return process.stdin.destroy();
        }
      });
    }
  });
};

var dialog, fs, fstream, log, pack, path, request, tar;

pack = require('../package.json');

request = require('superagent');

dialog = require('commander');

path = require('path');

log = require('./logger');

tar = require('tar');

fs = require('fs');

fstream = require('fstream');

/*
Check if widget is exists at the server
*/


exports.isExist = function(widget, callback) {
  return request.get("" + pack.homepage + "/widgets/" + widget.name).set('Accept', 'application/json').end(function(res) {
    if (res.statusCode === 502 || res.statusCode === 404 || !res.body.done) {
      if (widget.options.silent !== true) {
        log.requestError("" + pack.homepage + "/widgets/" + widget.name, widget.name);
      }
      return callback(false);
    } else {
      if (widget.options.silent !== true) {
        log.requestSuccess("" + pack.homepage + "/widgets/" + widget.name, widget.name);
      }
      return callback(true);
    }
  });
};

/*
Init new widget/theme
*/


exports.init = function(options) {
  var type, writeJSON;
  writeJSON = function(json) {
    return fs.writeFile(pack.maxmertkit, JSON.stringify(json, null, 4), function(err) {
      if (err) {
        log.error("while initializing â€“ " + err);
      }
      log.success("file " + pack.maxmertkit + " successfully created.");
      return process.stdin.destroy();
    });
  };
  type = ['widget', 'theme'];
  console.log('Choose what you will create');
  return dialog.choose(type, function(i) {
    return dialog.prompt("" + type[i] + " name: (test) ", function(pkgName) {
      if (pkgName === '') {
        pkgName = 'test';
      }
      return dialog.prompt("version: (0.0.0) ", function(version) {
        if (version === '') {
          version = '0.0.0';
        }
        return dialog.prompt("description: ", function(description) {
          return dialog.prompt("repository: ", function(repository) {
            return dialog.prompt("author: ", function(author) {
              return dialog.prompt("license: (BSD) ", function(license) {
                var maxmertkitjson;
                if (license === '') {
                  license = 'BSD';
                }
                maxmertkitjson = {
                  type: type[i],
                  name: pkgName,
                  version: version,
                  description: description,
                  repository: repository,
                  author: author,
                  license: license
                };
                console.log("");
                return dialog.confirm("Is everything correct? \n\n " + (JSON.stringify(maxmertkitjson, null, 4)) + "\n-> ", function(ok) {
                  console.log("");
                  if (!ok) {
                    log.error("Initializing canceled");
                    return process.stdin.destroy();
                  } else {
                    return fs.exists(pack.maxmertkit, function(exists) {
                      if (!exists) {
                        return writeJSON(maxmertkitjson);
                      } else {
                        log.error("File " + pack.maxmertkit + " already exists.");
                        return dialog.confirm("Do you want to overwrite it? -> ", function(ok) {
                          if (!ok) {
                            log.error("initialization canceled.");
                            return process.stdin.destroy();
                          } else {
                            return writeJSON(maxmertkitjson);
                          }
                        });
                      }
                    });
                  }
                });
              });
            });
          });
        });
      });
    });
  });
};

exports.install = function(widget, callback) {
  var fileName, req, stream;
  fileName = "" + widget.name + "@" + widget.version + ".tar";
  stream = fs.createWriteStream(fileName);
  req = request.get("" + pack.homepage + "/widgets/" + widget.name + "/" + widget.version + "/tar");
  req.pipe(stream);
  stream.on('close', function() {
    return fs.createReadStream(fileName).pipe(tar.Extract({
      path: './'
    })).on('error', function(err) {
      return log.error(err);
    }).on('end', function() {
      fs.unlink(fileName);
      return log.success("Installation of " + fileName + " complete.");
    });
  });
  return callback();
};

exports.pack = function() {
  var packFile,
    _this = this;
  packFile = "/tmp/" + pack.name + "@" + pack.version + ".tar";
  return fstream.Reader({
    type: "Directory",
    path: '.'
  }).pipe(tar.Pack({})).on('error', function() {
    return log.error('Failed to create package.');
  }).pipe(fstream.Writer(packFile).on("close", function() {
    log.success("Finished to create package");
    return _this.sendPack(packFile);
  }));
};

exports.sendPack = function(file) {
  return fs.readFile(pack.maxmertkit, function(err, data) {
    var maxmertkitjson;
    if (err) {
      log.error("can\'t find " + pack.maxmertkit + " file.");
      process.stdin.destroy();
    }
    if (data != null) {
      maxmertkitjson = JSON.parse(data);
      return request.post("" + pack.homepage + "/" + maxmertkitjson.author + "/publish").attach(path.basename(file), file).end(function(res) {
        return console.log(res);
      });
    }
  });
};

exports.checkPack = function() {
  return fs.readFile(pack.maxmertkit, function(err, data) {
    var maxmertkitjson,
      _this = this;
    if (err) {
      log.error("can\'t find " + pack.maxmertkit + " file.");
      process.stdin.destroy();
    }
    if (data != null) {
      maxmertkitjson = JSON.parse(data);
      return request.get("" + pack.homepage + "/widgets/" + maxmertkitjson.name + "/" + maxmertkitjson.version).set('Accept', 'application/json').end(function(res) {
        if (!res.ok) {
          log.requestError("Getting information about " + pack.name + " if failed.");
          return process.stdin.destroy();
        } else {
          return console.log(res.body);
        }
      });
    }
  });
};

exports.publish = function(author) {
  var _this = this;
  return dialog.password('Password: ', function(pass) {
    return request.post("" + pack.homepage + "/loginAJAX").send({
      username: author,
      password: pass
    }).set('Accept', 'application/json').end(function(res) {
      if (!res.ok) {
        log.error("Authorization Failed. Check the author name in maxmert.json or your password. Or maybe you need to register at " + pack.homepage + "?");
        return process.stdin.destroy();
      } else {
        log.success("Authorization succeed.");
        _this.checkPack();
        return process.stdin.destroy();
      }
    });
  });
};

exports.installJSON = function() {
  return fs.readFile(pack.maxmertkit, function(err, data) {
    var maxmertkitjson, version, widget, _ref, _results;
    if (err) {
      log.error("can\'t find " + pack.maxmertkit + " file.");
      process.stdin.destroy();
    }
    if (data != null) {
      maxmertkitjson = JSON.parse(data);
      if (!(maxmertkitjson.dependences != null)) {
        console.log("There is no dependences in " + pack.maxmertkit + " file.");
        return process.stdin.destroy();
      } else {
        _ref = maxmertkitjson.dependences;
        _results = [];
        for (widget in _ref) {
          version = _ref[widget];
          _results.push(exports.install({
            name: widget,
            version: version
          }, function() {}));
        }
        return _results;
      }
    }
  });
};
